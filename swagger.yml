swagger: "2.0"
info:
  description: "This is the API documentation of the EUREKA project."
  version: "1.0.0"
  title: "Eureka Living History API"
  termsOfService: "TBA"
  contact:
    email: "TBA@TBA.com"
  license:
    name: "MIT"
    url: "https://github.com/SWE574-Nerds/friendly-eureka/blob/master/LICENSE.md"
basePath: "/api/v1/"
schemes:
- "http"
paths:
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Get information on a user"
      description: ""
      operationId: "userInfo"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        description: "user id"
        required: true
        type: integer
      responses:
        200:
          schema:
            $ref: "#/definitions/RegisterResponse"
          description: "User retrieved"
        204:
          description: "Requirements unmet"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
  /user/register:
    post:
      tags:
      - "user"
      summary: "Create a new user"
      description: ""
      operationId: "register"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user"
        description: "User name for the new user"
        required: true
        schema:
          $ref: "#/definitions/RegisterForm"
      responses:
        200:
          schema:
            $ref: "#/definitions/RegisterResponse"
          description: "User created"
        204:
          description: "Requirements unmet"
        400:
          description: "Bad request"
        405:
          description: "Invalid input"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Get an auth token from the app"
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user"
        description: "User name"
        required: true
        schema:
          $ref: "#/definitions/LoginForm"
      responses:
        200:
          schema:
            $ref: "#/definitions/LoginResponse"
          description: "Logged in"
        405:
          description: "Invalid input"
  /listory/create:
    post:
      tags:
      - "listory"
      summary: "Create a living history item (listory)"
      security:
        - Bearer: []
      operationId: "listoryCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "listory"
        description: "The listory definition"
        required: true
        schema:
          $ref: '#/definitions/Listory'
      responses:
        200:
          schema:
            $ref: "#/definitions/ListoryDetails"
          description: "Created successfully"
        405:
          description: "Invalid input / Validation error"      
  /listory/:
    get:
      tags:
      - "listory"
      summary: "Get a list of all living history items"

      operationId: "listoryAll"
      produces:
      - "application/json"
      responses:
        200:
          schema:
            $ref: "#/definitions/AllListoryItems"
          description: "All listory items"
        405:
          description: "Invalid input / Validation error"      
  /listory/{id}:
    get:
      tags:
      - "listory"
      summary: "Get details of a listory item"
      operationId: "listoryGet"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        description: "The listory id"
        required: true
        type: "string"
      responses:
        200:
          schema:
            $ref: "#/definitions/ListoryDetails"
          description: "Retrieved listory details"
        405:
          description: "Incorrect id"  
    post:
      tags:
      - "listory"
      summary: "Update a listory item"
      security:
        - Bearer: []
      operationId: "listoryUpdate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        description: "The listory id"
        required: true
        type: "string"
      - in: "body"
        name: "listory"
        schema:
          $ref: '#/definitions/Listory'
      responses:
        200:
          schema:
            $ref: "#/definitions/ListoryDetails"
          description: "Updated listory details"
        405:
          description: "Incorrect id / Incorrect form"  
    delete:
      tags:
      - "listory"
      summary: "Delete a listory item"
      security:
        - Bearer: []
      operationId: "listoryDelete"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        description: "The listory id"
        required: true
        type: "string"
      responses:
        204:
          description: "Deleted listory"
        405:
          description: "Incorrect id"  
  /listory/{id}/annotations:
    get:
      tags:
      - "listory"
      summary: "Get annotations of a listory item"
      operationId: "listoryGetAnnos"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        description: "The listory id"
        required: true
        type: "string"
      responses:
        200:
          schema:
            type: array
            items:
              $ref: '#/definitions/AnnotationJSONLD'
          description: "Retrieved listory annotation details"
        405:
          description: "Incorrect id"
  /listory/{id}/follow:
    get:
      summary: "Follow a listory item"
      tags: 
        - follow
      security: 
        - Bearer: []
      parameters:
      - in: "path"
        name: "id"
        description: "The listory id user wants to follow"
        required: true
        type: "string"
      responses:
        200:
          description: OK
        405: 
          description: "Invalid"
  /listory/{id}/unfollow:
    get:
      summary: "Unfollow a listory item"
      tags: 
        - follow
      security: 
        - Bearer: []
      parameters:
      - in: "path"
        name: "id"
        description: "The listory id user wants to unfollow"
        required: true
        type: "string"
      responses:
        200:
          description: OK
        405: 
          description: "Invalid"
  /upload/{type}:
    post:
      tags:
        - content
      security: 
        - Bearer: []
      parameters: 
      - in: "path"
        name: "type"
        description: "The type of the resource"
        required: true
        type: "string"
      - in: "formData"
        name: "file"
        type: "file"
        description: "The file to be uploaded"
        required: true
        
      consumes: 
        - "multipart/form-data"
      produces: 
        - "application/json"
      responses:
        200:
          schema:
            $ref: '#/definitions/ContentResponse'
          description: OK
        405:
          description: "Missing information"
  /content/{id}:
    get:
      summary: "Get the content"
      tags:
        - content
      parameters: 
      - in: "path"
        name: "id"
        description: "The id of the resource"
        required: true
        type: "string"
      produces: 
        - "application/octet-stream"
      responses:
        200:
          description: "Returns the resource that was provided"
        405:
          description: "Missing information"
    delete:
      summary: "Delete content"
      tags:
        - content
      security: 
        - Bearer: []
      parameters: 
      - in: "path"
        name: "id"
        description: "The id of the resource"
        required: true
        type: "string"
      responses:
        204:
          description: "OK - Resource deleted"
        400:
          description: "Bad Request - Resource occupied by listory"
        405:
          description: "Missing information"
  /annotation/{id}:
    get:
      tags:
      - "annotation"
      summary: "Get annotations of a listory item"
      operationId: "annoGet"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        description: "The listory id"
        required: true
        type: "string"
      responses:
        200:
          schema:
            $ref: "#/definitions/AnnotationDetails"
          description: "Retrieved listory annotations"
        405:
          description: "Incorrect id"
    post:
      tags:
      - "annotation"
      summary: "Create an annotation"
      security:
        - Bearer: []
      operationId: "annoCreate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        description: "The listory id"
        required: true
        type: "string"
      - in: "body"
        name: "listory"
        schema:
          $ref: '#/definitions/AnnotationRequest'
      responses:
        200:
          schema:
            $ref: "#/definitions/AnnotationDetails"
          description: "Created annotations"
        405:
          description: "Incorrect id / Incorrect form"  
  /time:
    get:
      tags:
      - "time"
      summary: "Get time options"
      operationId: "time"
      produces:
      - "application/json"
      responses:
        200:
          schema:
            $ref: "#/definitions/TimeInfoArray"
          description: "Retrieved time info details"
  /category:
    get:
      tags:
      - "category"
      summary: "Get category options"
      operationId: "category"
      produces:
      - "application/json"
      responses:
        200:
          schema:
            $ref: "#/definitions/CategoryArray"
          description: "Retrieved category details"
  
definitions:
  AllListoryItems:
    type: array
    items:
      $ref: '#/definitions/ListoryDetails'
  ContentResponse:
    properties:
      id:
        type: "string"
        description: "id of the resource"
      type:
        type: "string"
        description: "Type of the resource"
  RegisterResponse:
    type: "object"
    properties:
      name:
        type: "string"
      userId:
        type: "string"
  LoginResponse:
    type: "object"
    properties:
      name:
        type: "string"
      userId:
        type: "string"
      token:
        type: "string"
  RegisterForm:
    type: "object"
    properties:
      name:
        type: "string"
        description: User name of the new user
      password:
        type: "string"
        description: The password in plain text
      mail:
        type: "string"
        description: Contact email for the user
  LoginForm:
    type: "object"
    properties:
      name:
        type: "string"
        description: User name of the new user
      password:
        type: "string"
        description: The password in plain text
  TimeInfoArray:
    type: "array"
    items:
      $ref: '#/definitions/TimeInfo'
  TimeInfoGroup:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The of the time type"
      units:
        type: "string"
        description: "The units of values. YEAR or DATE"
      values: 
        type: array
        items:
          type: integer
   
  TimeInfoForm:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "timeInfo ID"
      value_1:
        type: "string"
        description: "The time value in the required unit"
      value_2:
        type: "string"
        description: "The time value in the required unit"
    
  Listory:
    type: "object"
    properties:
      name: 
        type: "string"
        description: "The title of the listory"
      description:
        type: "string"
        description: "The text description for the listory"
      image:
        type: "string"
        description: "Link to image if applicable"
      category:
        type: "integer"
        description: "The category id"
      timeInfo:
        $ref: '#/definitions/TimeInfoForm'
      
      
  ListoryDetails:
    type: "object"
    properties:
      name: 
        type: "string"
        description: "The title of the listory"
      description:
        type: "string"
        description: "The text description for the listory"
      image:
        type: "string"
        description: "Link to image if applicable"
      page:
        type: "string"
        description: "The link to listory item"
      listoryId:
        type: "string"
        description: "The id/identifier of the listory item"
      category:
        type: "string"
        description: "The category name"
      owner:
        $ref: '#/definitions/RegisterResponse'
      createdAt:
        type: "string"
        description: "Creation date of the listory item"
      time:
        $ref: '#/definitions/TimeInfoGroup'
      
  CategoryArray:
    type: "array"
    items:
      $ref: '#/definitions/Category'
  Category:
    type: "object"
    properties:
      name:
        type: "string"
        description : "Category name/label"
      id:
        type: "integer"
        description: "The id to be used in the rest calls."
  TimeInfo:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "The id of the timeInfo to be used in the calls"
      name:
        type: "string"
        description: ""
      value_name:
        type: "string"
      value_count:
        type: "string"
  AnnotationRequest:
    type: "object"
    properties:
      listory: 
        type: "string"
        description: "The ID of the listory user want's to annotate"
      body:
        $ref: '#/definitions/AnnotationBodyRequest'
  AnnotationBodyRequest:
    type: "object"
    properties:
      message: 
        type: "string"
        description: "String body of the annotation"
  AnnotationDetails:
    type: "object"
    description: "Annotation information also with the JSON-LD object"
    properties:
      json: 
        $ref: '#/definitions/AnnotationJSONLD'
      author: 
        $ref: '#/definitions/RegisterResponse'
        description: "The user which created this annotation"
      createdAt: 
        type: string
        description: "The date at which the annotation was created"
      body:
        $ref: '#/definitions/AnnotationBodyRequest'
  AnnotationJSONLD:
    type: object
    description: "Annotation in JSON-LD standard format"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
  
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"


